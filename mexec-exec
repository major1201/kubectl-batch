#!/usr/bin/env bash

set -euo pipefail

SCRIPTPATH=$( dirname "$(realpath "$0")" )

parallel=${PARALLEL-1}
local_file=
declare -a kgp_args keti_args kcp_args cmd

errecho() {
    >&2 echo "${@//$'\n'/}"
}

source "${SCRIPTPATH}/display-help.sh"

parse_arguments() {
    if [[ "$#" = "0" ]]; then
        display_help
        exit 1
    fi

    while :
    do
        if [[ "$#" = "0" ]]; then
            break
        fi

        # case "${1?cmd must be provided after "--"}" in
        case "$1" in
        -h|--help)
            display_help
            exit
        ;;
        -p|--parallel)
            parallel=$2
            shift 2
        ;;
        -F|--local-file)
            local_file=$2
            shift 2
        ;;
        --)
            shift
            cmd+=("$@")
            break
        ;;
        -c|--container)
            # pass to kubectl exec
            keti_args+=("$1" "$2")
            kcp_args+=("$1" "$2")
            shift 2
        ;;
        -n|--namespace)
            # pass to both kgp and kubectl exec
            kgp_args+=("$1" "$2")
            keti_args+=("$1" "$2")
            kcp_args+=("$1" "$2")
            shift 2
        ;;
        -o|--output)
            # ignore
            shift 2
        ;;
        *)
            kgp_args+=("$1")
            shift
        ;;
        esac
    done
}

cleanup() {
    rm -f "${temp_file}"
}

main() {
    parse_arguments "$@"

    if [[ -z "${local_file}" ]]; then
        kubectl get pod "${kgp_args[@]}" -o name | awk -F/ '{print $2}' | xargs -P "${parallel}" -I{} bash -c "kubectl exec ${keti_args[*]@Q} {} -- ${cmd[*]@Q} |& sed s/^/{}\ /g"
    else
        if [[ ! -f "${local_file}" ]];  then
            errecho "Error: local file ${local_file} not found"
            exit 1
        fi

        remote_file=/kmexec-$(date '+%Y%m%d%H%M%S')
        pods=$(kubectl get pod "${kgp_args[@]}" -o name | awk -F/ '{print $2}')

        export remote_file base64_encoded
        base64_encoded=$(base64 -i "${local_file}")
        temp_file=$(mktemp)
        trap 'cleanup' EXIT

        envsubst < "${SCRIPTPATH}/scripts/remote_run_tmpl.sh" > "${temp_file}"
        chmod +x "${temp_file}"

        echo "Uploading file to ${remote_file}, cleanup automatically"
        echo "${pods}" | xargs -P "${parallel}" -I{} bash -c "kubectl cp ${kcp_args[*]} ${temp_file} {}:${remote_file} |& sed s/^/{}\ /g"

        echo
        echo "Running script on every pod"
        echo "${pods}" | xargs -P "${parallel}" -I{} bash -c "kubectl exec ${keti_args[*]} {} -- ${remote_file} |& sed s/^/{}\ /g"
    fi
}

main "$@"
